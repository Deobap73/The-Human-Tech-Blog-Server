// tests/auth.refresh.test.ts
import request from 'supertest';
import mongoose from 'mongoose';
import { MongoMemoryServer } from 'mongodb-memory-server';
import app from '../app';

let mongo: MongoMemoryServer;

beforeAll(async () => {
  mongo = await MongoMemoryServer.create();
  await mongoose.connect(mongo.getUri(), { dbName: 'test' });
});

afterAll(async () => {
  await mongoose.disconnect();
  await mongo.stop();
});

describe('Refresh Token Flow', () => {
  let refreshToken: string;
  let accessToken: string;

  it('should login and receive tokens', async () => {
    await request(app).post('/api/auth/register').send({
      name: 'Test User',
      email: 'refresh@test.com',
      password: '123456',
    });

    const loginRes = await request(app).post('/api/auth/login').send({
      email: 'refresh@test.com',
      password: '123456',
    });

    const cookies = loginRes.headers['set-cookie'];
    if (Array.isArray(cookies)) {
      refreshToken = cookies.find((c: string) => c.includes('refreshToken')) ?? '';
    }
    accessToken = loginRes.body.accessToken;

    expect(accessToken).toBeDefined();
    expect(refreshToken).toBeDefined();
  });

  it('should return new access token with valid refresh token', async () => {
    const res = await request(app).post('/api/auth/refresh').set('Cookie', refreshToken);

    expect(res.status).toBe(200);
    expect(res.body.accessToken).toBeDefined();
  });

  it('should fail without refresh token', async () => {
    const res = await request(app).post('/api/auth/refresh');
    expect(res.status).toBe(401);
  });

  it('should fail with invalid refresh token', async () => {
    const res = await request(app)
      .post('/api/auth/refresh')
      .set('Cookie', 'refreshToken=invalid.token.here');

    expect(res.status).toBe(403);
  });

  it('should clear cookie on logout with secure flags', async () => {
    const res = await request(app).post('/api/auth/logout').set('Cookie', refreshToken);

    const clearedCookies = res.headers['set-cookie'];
    if (Array.isArray(clearedCookies)) {
      const cleared = clearedCookies.find(
        (c: string) => c.includes('refreshToken=') && c.includes('Expires=Thu, 01 Jan 1970')
      );
      expect(cleared).toBeDefined();
    }
    expect(res.status).toBe(200);
  });
});
